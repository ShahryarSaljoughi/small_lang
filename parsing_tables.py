
# parsing_tables.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "programleftANDORrightNOTleft><greater_equal_signless_equal_signnot_equal_signleft+-left*/rightUMINUSIN_OUT comment identifier integer_constant string_constant assign_op less_equal_sign greater_equal_sign not_equal_sign IN ELSE OR PROCEDURE IF READ END NOT INTEGER VAR THEN CONST STRING OUT DO RETURN PRINT TO BEGIN CALL FOR AND program : A B C  BEGIN D ENDA :  empty\n            | CONST A_1A_1 :    const_decl\n           |    const_decl A_1B : empty\n         | VAR B_1B_1 : var_decl\n           | var_decl B_1C : empty\n         | proc_decl CD : statement\n         | statement D const_decl : identifier E '=' integer_constantE :  empty \n         |  ',' identifier E var_decl : identifier E ':' type proc_decl : PROCEDURE identifier '(' F ')' ';' blockF : empty \n         | format F_1F_1 : empty\n           | ';' format F_1format : identifier E ':' type\n              | identifier E ':' mode typemode : IN\n            | OUT\n            | IN_OUTtype : INTEGERblock : BEGIN A B D END\n             | BEGIN A B END print : PRINT '(' string_constant G ')' G : empty \n         | ',' expression Gread : READ '(' string_constant H ')'  H : empty \n          | ',' var H cond : IF bool THEN statement\n            | IF bool THEN statement ELSE statementcall : CALL identifier '(' ')'\n            | CALL identifier '(' expression G ')' var : identifier\n           | identifier '[' expression ']' statement_assign : var assign_op expression \n    statement : block  \n                | print\n                | read\n                | statement_assign\n                | cond\n                | statement_for\n                | return\n                | callreturn : RETURN bool : NOT bool\n            | bool AND bool\n            | bool OR bool\n            | expression relop expression\n            | '(' bool ')' empty : statement_for : FOR identifier assign_op TO expression DO statement  relop : '=' \n               | less_equal_sign\n               | '>'\n               | greater_equal_sign\n               | '<'\n               | not_equal_sign expression : integer_constant\n                  | expression '+' expression\n                  | expression '-' expression\n                  | expression '*' expression\n                  | expression '/' expression\n                  | '-' expression %prec UMINUS\n                  | '(' expression ')' \n                  | var "
    
_lr_action_items = {'>':([37,62,65,67,83,88,113,119,123,124,125,127,],[-41,-66,-73,91,91,-71,-42,-72,-69,-70,-67,-68,]),'*':([37,62,65,67,78,81,83,88,109,112,113,119,123,124,125,126,127,131,137,],[-41,-66,-73,92,92,92,92,-71,92,92,-42,-72,-69,-70,92,92,92,92,92,]),'(':([28,33,38,42,55,57,60,61,63,66,75,77,85,87,89,90,91,92,93,94,95,96,97,98,99,105,117,],[51,54,58,61,75,77,77,61,61,77,77,77,61,61,-63,-64,-62,77,77,-61,77,-60,77,77,-65,77,77,]),'integer_constant':([23,42,57,60,61,63,66,75,77,85,87,89,90,91,92,93,94,95,96,97,98,99,105,117,],[30,62,62,62,62,62,62,62,62,62,62,-63,-64,-62,62,62,-61,62,-60,62,62,-65,62,62,]),'BEGIN':([0,3,4,5,7,9,10,11,15,17,18,19,20,24,26,27,30,32,35,36,37,41,43,45,46,47,48,49,50,52,53,56,62,65,76,81,86,88,108,110,113,119,121,123,124,125,127,130,132,134,135,138,145,147,149,150,152,],[-58,-58,-2,-4,-3,-58,-6,-5,-8,-7,-58,27,-10,-9,-11,35,-14,-49,-58,-46,-41,-45,-50,-44,-48,-47,35,-51,-52,-17,-28,-58,-66,-73,35,-43,35,-71,-39,-30,-42,-72,-37,-69,-70,-67,-68,35,-31,-29,-34,35,-18,-40,35,-38,-59,]),'OR':([37,62,64,65,82,84,88,113,118,119,120,122,123,124,125,126,127,],[-41,-66,87,-73,87,-53,-71,-42,-57,-72,-54,-55,-69,-70,-67,-56,-68,]),']':([37,62,65,78,88,113,119,123,124,125,127,],[-41,-66,-73,113,-71,-42,-72,-69,-70,-67,-68,]),'$end':([1,68,],[0,-1,]),'-':([37,42,57,60,61,62,63,65,66,67,75,77,78,81,83,85,87,88,89,90,91,92,93,94,95,96,97,98,99,105,109,112,113,117,119,123,124,125,126,127,131,137,],[-41,66,66,66,66,-66,66,-73,66,98,66,66,98,98,98,66,66,-71,-63,-64,-62,66,66,-61,66,-60,66,66,-65,66,98,98,-42,66,-72,-69,-70,-67,98,-68,98,98,]),'not_equal_sign':([37,62,65,67,83,88,113,119,123,124,125,127,],[-41,-66,-73,99,99,-71,-42,-72,-69,-70,-67,-68,]),'IN':([128,],[140,]),'greater_equal_sign':([37,62,65,67,83,88,113,119,123,124,125,127,],[-41,-66,-73,89,89,-71,-42,-72,-69,-70,-67,-68,]),'OUT':([128,],[142,]),'VAR':([0,3,4,5,7,11,30,35,56,],[-58,8,-2,-4,-3,-5,-14,-58,8,]),'CONST':([0,35,],[2,2,]),'less_equal_sign':([37,62,65,67,83,88,113,119,123,124,125,127,],[-41,-66,-73,94,94,-71,-42,-72,-69,-70,-67,-68,]),':':([13,16,22,25,29,70,100,],[-15,-58,-58,31,-16,-58,128,]),'=':([6,13,14,22,29,37,62,65,67,83,88,113,119,123,124,125,127,],[-58,-15,23,-58,-16,-41,-66,-73,96,96,-71,-42,-72,-69,-70,-67,-68,]),'[':([37,],[57,]),'INTEGER':([31,128,139,140,142,143,],[53,53,-27,-25,-26,53,]),'THEN':([37,62,64,65,84,88,113,118,119,120,122,123,124,125,126,127,],[-41,-66,86,-73,-53,-71,-42,-57,-72,-54,-55,-69,-70,-67,-56,-68,]),'PRINT':([4,5,7,10,11,15,17,24,27,30,32,35,36,37,41,43,45,46,47,48,49,50,52,53,56,62,65,76,81,86,88,108,110,113,119,121,123,124,125,127,132,134,135,138,147,149,150,152,],[-2,-4,-3,-6,-5,-8,-7,-9,33,-14,-49,-58,-46,-41,-45,-50,-44,-48,-47,33,-51,-52,-17,-28,-58,-66,-73,33,-43,33,-71,-39,-30,-42,-72,-37,-69,-70,-67,-68,-31,-29,-34,33,-40,33,-38,-59,]),')':([37,51,53,62,65,71,72,73,74,75,79,82,83,84,88,101,103,106,107,109,112,113,114,116,118,119,120,122,123,124,125,126,127,129,131,133,136,141,144,146,148,151,],[-41,-58,-28,-66,-73,-58,-19,104,-58,108,-58,118,119,-53,-71,-20,-21,-32,132,-58,119,-42,135,-35,-57,-72,-54,-55,-69,-70,-67,-56,-68,-58,-58,147,-58,-23,-22,-33,-36,-24,]),'END':([4,5,7,10,11,15,17,24,30,32,35,36,37,41,43,44,45,46,47,48,49,50,52,53,56,62,65,69,76,81,88,108,110,111,113,119,121,123,124,125,127,132,134,135,147,150,152,],[-2,-4,-3,-6,-5,-8,-7,-9,-14,-49,-58,-46,-41,-45,-50,68,-44,-48,-47,-12,-51,-52,-17,-28,-58,-66,-73,-13,110,-43,-71,-39,-30,134,-42,-72,-37,-69,-70,-67,-68,-31,-29,-34,-40,-38,-59,]),'AND':([37,62,64,65,82,84,88,113,118,119,120,122,123,124,125,126,127,],[-41,-66,85,-73,85,-53,-71,-42,-57,-72,-54,-55,-69,-70,-67,-56,-68,]),'PROCEDURE':([0,3,4,5,7,9,10,11,15,17,18,24,30,52,53,110,134,145,],[-58,-58,-2,-4,-3,21,-6,-5,-8,-7,21,-9,-14,-17,-28,-30,-29,-18,]),',':([6,16,22,37,62,65,70,74,79,88,109,113,119,123,124,125,127,131,136,],[12,12,12,-41,-66,-73,12,105,115,-71,105,-42,-72,-69,-70,-67,-68,105,115,]),'<':([37,62,65,67,83,88,113,119,123,124,125,127,],[-41,-66,-73,90,90,-71,-42,-72,-69,-70,-67,-68,]),'string_constant':([54,58,],[74,79,]),'READ':([4,5,7,10,11,15,17,24,27,30,32,35,36,37,41,43,45,46,47,48,49,50,52,53,56,62,65,76,81,86,88,108,110,113,119,121,123,124,125,127,132,134,135,138,147,149,150,152,],[-2,-4,-3,-6,-5,-8,-7,-9,38,-14,-49,-58,-46,-41,-45,-50,-44,-48,-47,38,-51,-52,-17,-28,-58,-66,-73,38,-43,38,-71,-39,-30,-42,-72,-37,-69,-70,-67,-68,-31,-29,-34,38,-40,38,-38,-59,]),'TO':([80,],[117,]),'IF':([4,5,7,10,11,15,17,24,27,30,32,35,36,37,41,43,45,46,47,48,49,50,52,53,56,62,65,76,81,86,88,108,110,113,119,121,123,124,125,127,132,134,135,138,147,149,150,152,],[-2,-4,-3,-6,-5,-8,-7,-9,42,-14,-49,-58,-46,-41,-45,-50,-44,-48,-47,42,-51,-52,-17,-28,-58,-66,-73,42,-43,42,-71,-39,-30,-42,-72,-37,-69,-70,-67,-68,-31,-29,-34,42,-40,42,-38,-59,]),'identifier':([2,4,5,7,8,10,11,12,15,17,21,24,27,30,32,34,35,36,37,39,41,42,43,45,46,47,48,49,50,51,52,53,56,57,60,61,62,63,65,66,75,76,77,81,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,105,108,110,113,115,117,119,121,123,124,125,127,132,134,135,138,147,149,150,152,],[6,-2,6,-3,16,-6,-5,22,16,-7,28,-9,37,-14,-49,55,-58,-46,-41,59,-45,37,-50,-44,-48,-47,37,-51,-52,70,-17,-28,-58,37,37,37,-66,37,-73,37,37,37,37,-43,37,37,37,-71,-63,-64,-62,37,37,-61,37,-60,37,37,-65,70,37,-39,-30,-42,37,37,-72,-37,-69,-70,-67,-68,-31,-29,-34,37,-40,37,-38,-59,]),'DO':([37,62,65,88,113,119,123,124,125,127,137,],[-41,-66,-73,-71,-42,-72,-69,-70,-67,-68,149,]),'assign_op':([37,40,59,113,],[-41,60,80,-42,]),'IN_OUT':([128,],[139,]),'+':([37,62,65,67,78,81,83,88,109,112,113,119,123,124,125,126,127,131,137,],[-41,-66,-73,95,95,95,95,-71,95,95,-42,-72,-69,-70,-67,95,-68,95,95,]),';':([53,71,104,129,141,151,],[-28,102,130,102,-23,-24,]),'CALL':([4,5,7,10,11,15,17,24,27,30,32,35,36,37,41,43,45,46,47,48,49,50,52,53,56,62,65,76,81,86,88,108,110,113,119,121,123,124,125,127,132,134,135,138,147,149,150,152,],[-2,-4,-3,-6,-5,-8,-7,-9,34,-14,-49,-58,-46,-41,-45,-50,-44,-48,-47,34,-51,-52,-17,-28,-58,-66,-73,34,-43,34,-71,-39,-30,-42,-72,-37,-69,-70,-67,-68,-31,-29,-34,34,-40,34,-38,-59,]),'ELSE':([32,36,37,41,43,45,46,47,49,50,62,65,81,88,108,110,113,119,121,123,124,125,127,132,134,135,147,150,152,],[-49,-46,-41,-45,-50,-44,-48,-47,-51,-52,-66,-73,-43,-71,-39,-30,-42,-72,138,-69,-70,-67,-68,-31,-29,-34,-40,-38,-59,]),'FOR':([4,5,7,10,11,15,17,24,27,30,32,35,36,37,41,43,45,46,47,48,49,50,52,53,56,62,65,76,81,86,88,108,110,113,119,121,123,124,125,127,132,134,135,138,147,149,150,152,],[-2,-4,-3,-6,-5,-8,-7,-9,39,-14,-49,-58,-46,-41,-45,-50,-44,-48,-47,39,-51,-52,-17,-28,-58,-66,-73,39,-43,39,-71,-39,-30,-42,-72,-37,-69,-70,-67,-68,-31,-29,-34,39,-40,39,-38,-59,]),'/':([37,62,65,67,78,81,83,88,109,112,113,119,123,124,125,126,127,131,137,],[-41,-66,-73,93,93,93,93,-71,93,93,-42,-72,-69,-70,93,93,93,93,93,]),'NOT':([42,61,63,85,87,],[63,63,63,63,63,]),'RETURN':([4,5,7,10,11,15,17,24,27,30,32,35,36,37,41,43,45,46,47,48,49,50,52,53,56,62,65,76,81,86,88,108,110,113,119,121,123,124,125,127,132,134,135,138,147,149,150,152,],[-2,-4,-3,-6,-5,-8,-7,-9,50,-14,-49,-58,-46,-41,-45,-50,-44,-48,-47,50,-51,-52,-17,-28,-58,-66,-73,50,-43,50,-71,-39,-30,-42,-72,-37,-69,-70,-67,-68,-31,-29,-34,50,-40,50,-38,-59,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement_for':([27,48,76,86,138,149,],[32,32,32,32,32,32,]),'F_1':([71,129,],[101,144,]),'B_1':([8,15,],[17,24,]),'proc_decl':([9,18,],[18,18,]),'type':([31,128,143,],[52,141,151,]),'empty':([0,3,6,9,16,18,22,35,51,56,70,71,74,79,109,129,131,136,],[4,10,13,20,13,20,13,4,72,10,13,103,106,116,106,103,106,116,]),'read':([27,48,76,86,138,149,],[36,36,36,36,36,36,]),'H':([79,136,],[114,148,]),'var_decl':([8,15,],[15,15,]),'program':([0,],[1,]),'format':([51,102,],[71,129,]),'var':([27,42,48,57,60,61,63,66,75,76,77,85,86,87,92,93,95,97,98,105,115,117,138,149,],[40,65,40,65,65,65,65,65,65,40,65,65,40,65,65,65,65,65,65,65,136,65,40,40,]),'print':([27,48,76,86,138,149,],[41,41,41,41,41,41,]),'return':([27,48,76,86,138,149,],[43,43,43,43,43,43,]),'D':([27,48,76,],[44,69,111,]),'A_1':([2,5,],[7,11,]),'F':([51,],[73,]),'block':([27,48,76,86,130,138,149,],[45,45,45,45,145,45,45,]),'C':([9,18,],[19,26,]),'A':([0,35,],[3,56,]),'bool':([42,61,63,85,87,],[64,82,84,120,122,]),'E':([6,16,22,70,],[14,25,29,100,]),'cond':([27,48,76,86,138,149,],[46,46,46,46,46,46,]),'const_decl':([2,5,],[5,5,]),'statement_assign':([27,48,76,86,138,149,],[47,47,47,47,47,47,]),'statement':([27,48,76,86,138,149,],[48,48,48,121,150,152,]),'B':([3,56,],[9,76,]),'relop':([67,83,],[97,97,]),'call':([27,48,76,86,138,149,],[49,49,49,49,49,49,]),'mode':([128,],[143,]),'G':([74,109,131,],[107,133,146,]),'expression':([42,57,60,61,63,66,75,77,85,87,92,93,95,97,98,105,117,],[67,78,81,83,67,88,109,112,67,67,123,124,125,126,127,131,137,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> A B C BEGIN D END','program',6,'p_program','our_parser.py',14),
  ('A -> empty','A',1,'p_A','our_parser.py',18),
  ('A -> CONST A_1','A',2,'p_A','our_parser.py',19),
  ('A_1 -> const_decl','A_1',1,'p_A_1','our_parser.py',25),
  ('A_1 -> const_decl A_1','A_1',2,'p_A_1','our_parser.py',26),
  ('B -> empty','B',1,'p_B','our_parser.py',30),
  ('B -> VAR B_1','B',2,'p_B','our_parser.py',31),
  ('B_1 -> var_decl','B_1',1,'p_B_1','our_parser.py',35),
  ('B_1 -> var_decl B_1','B_1',2,'p_B_1','our_parser.py',36),
  ('C -> empty','C',1,'p_C','our_parser.py',40),
  ('C -> proc_decl C','C',2,'p_C','our_parser.py',41),
  ('D -> statement','D',1,'p_D','our_parser.py',45),
  ('D -> statement D','D',2,'p_D','our_parser.py',46),
  ('const_decl -> identifier E = integer_constant','const_decl',4,'p_const_decl','our_parser.py',50),
  ('E -> empty','E',1,'p_E','our_parser.py',53),
  ('E -> , identifier E','E',3,'p_E','our_parser.py',54),
  ('var_decl -> identifier E : type','var_decl',4,'p_var_decl','our_parser.py',58),
  ('proc_decl -> PROCEDURE identifier ( F ) ; block','proc_decl',7,'p_proc_decl','our_parser.py',62),
  ('F -> empty','F',1,'p_F','our_parser.py',66),
  ('F -> format F_1','F',2,'p_F','our_parser.py',67),
  ('F_1 -> empty','F_1',1,'p_F_1','our_parser.py',71),
  ('F_1 -> ; format F_1','F_1',3,'p_F_1','our_parser.py',72),
  ('format -> identifier E : type','format',4,'p_format','our_parser.py',76),
  ('format -> identifier E : mode type','format',5,'p_format','our_parser.py',77),
  ('mode -> IN','mode',1,'p_mode','our_parser.py',81),
  ('mode -> OUT','mode',1,'p_mode','our_parser.py',82),
  ('mode -> IN_OUT','mode',1,'p_mode','our_parser.py',83),
  ('type -> INTEGER','type',1,'p_type','our_parser.py',87),
  ('block -> BEGIN A B D END','block',5,'p_block','our_parser.py',91),
  ('block -> BEGIN A B END','block',4,'p_block','our_parser.py',92),
  ('print -> PRINT ( string_constant G )','print',5,'p_print','our_parser.py',96),
  ('G -> empty','G',1,'p_G','our_parser.py',100),
  ('G -> , expression G','G',3,'p_G','our_parser.py',101),
  ('read -> READ ( string_constant H )','read',5,'p_read','our_parser.py',106),
  ('H -> empty','H',1,'p_H','our_parser.py',110),
  ('H -> , var H','H',3,'p_H','our_parser.py',111),
  ('cond -> IF bool THEN statement','cond',4,'p_cond','our_parser.py',115),
  ('cond -> IF bool THEN statement ELSE statement','cond',6,'p_cond','our_parser.py',116),
  ('call -> CALL identifier ( )','call',4,'p_call','our_parser.py',120),
  ('call -> CALL identifier ( expression G )','call',6,'p_call','our_parser.py',121),
  ('var -> identifier','var',1,'p_var','our_parser.py',125),
  ('var -> identifier [ expression ]','var',4,'p_var','our_parser.py',126),
  ('statement_assign -> var assign_op expression','statement_assign',3,'p_statement_assign','our_parser.py',130),
  ('statement -> block','statement',1,'p_statement','our_parser.py',135),
  ('statement -> print','statement',1,'p_statement','our_parser.py',136),
  ('statement -> read','statement',1,'p_statement','our_parser.py',137),
  ('statement -> statement_assign','statement',1,'p_statement','our_parser.py',138),
  ('statement -> cond','statement',1,'p_statement','our_parser.py',139),
  ('statement -> statement_for','statement',1,'p_statement','our_parser.py',140),
  ('statement -> return','statement',1,'p_statement','our_parser.py',141),
  ('statement -> call','statement',1,'p_statement','our_parser.py',142),
  ('return -> RETURN','return',1,'p_return','our_parser.py',147),
  ('bool -> NOT bool','bool',2,'p_bool','our_parser.py',151),
  ('bool -> bool AND bool','bool',3,'p_bool','our_parser.py',152),
  ('bool -> bool OR bool','bool',3,'p_bool','our_parser.py',153),
  ('bool -> expression relop expression','bool',3,'p_bool','our_parser.py',154),
  ('bool -> ( bool )','bool',3,'p_bool','our_parser.py',155),
  ('empty -> <empty>','empty',0,'p_empty','our_parser.py',159),
  ('statement_for -> FOR identifier assign_op TO expression DO statement','statement_for',7,'p_statement_for','our_parser.py',165),
  ('relop -> =','relop',1,'p_relop','our_parser.py',169),
  ('relop -> less_equal_sign','relop',1,'p_relop','our_parser.py',170),
  ('relop -> >','relop',1,'p_relop','our_parser.py',171),
  ('relop -> greater_equal_sign','relop',1,'p_relop','our_parser.py',172),
  ('relop -> <','relop',1,'p_relop','our_parser.py',173),
  ('relop -> not_equal_sign','relop',1,'p_relop','our_parser.py',174),
  ('expression -> integer_constant','expression',1,'p_expression','our_parser.py',192),
  ('expression -> expression + expression','expression',3,'p_expression','our_parser.py',193),
  ('expression -> expression - expression','expression',3,'p_expression','our_parser.py',194),
  ('expression -> expression * expression','expression',3,'p_expression','our_parser.py',195),
  ('expression -> expression / expression','expression',3,'p_expression','our_parser.py',196),
  ('expression -> - expression','expression',2,'p_expression','our_parser.py',197),
  ('expression -> ( expression )','expression',3,'p_expression','our_parser.py',198),
  ('expression -> var','expression',1,'p_expression','our_parser.py',199),
]
