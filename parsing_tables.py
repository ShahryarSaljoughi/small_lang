
# parsing_tables.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "programleftANDORrightNOTleft><greater_equal_signless_equal_signnot_equal_signleft+-left*/rightUMINUSIN_OUT comment identifier integer_constant string_constant assign_op less_equal_sign greater_equal_sign not_equal_sign NOT CONST TO STRING ELSE PROCEDURE RETURN READ AND OR INTEGER IF VAR THEN CALL BEGIN PRINT OUT DO END FOR IN program : A B C  BEGIN D ENDA :  empty\n            | CONST A_1A_1 :    const_decl\n           |    const_decl A_1B : empty\n         | VAR B_1B_1 : var_decl\n           | var_decl B_1C : empty\n         | proc_decl CD : statement\n         | statement D const_decl : identifier E '=' integer_constantE :  empty \n         |  ',' identifier E var_decl : identifier E ':' type proc_decl : PROCEDURE identifier '(' F ')' ';' blockF : empty \n         | format F_1F_1 : empty\n           | ';' format F_1format : identifier E ':' type\n              | identifier E ':' mode typemode : IN\n            | OUT\n            | IN_OUTtype : INTEGERblock : BEGIN A B D END\n             | BEGIN A B END print : PRINT '(' string_constant G ')' G : empty \n         | ',' expression Gread : READ '(' string_constant H ')'  H : empty \n          | ',' var H cond : IF bool THEN statement\n            | IF bool THEN statement ELSE statementcall : CALL identifier '(' ')'\n            | CALL identifier '(' expression G ')' var : identifier\n           | identifier '[' expression ']' statement_assign : var assign_op expression \n    statement : block  \n                | print\n                | read\n                | statement_assign\n                | cond\n                | statement_for\n                | return\n                | callreturn : RETURN bool : NOT bool\n            | bool AND bool\n            | bool OR bool\n            | expression relop expression\n            | '(' bool ')' empty : statement_for : FOR identifier assign_op TO expression DO statement  relop : '=' \n               | less_equal_sign\n               | '>'\n               | greater_equal_sign\n               | '<'\n               | not_equal_sign expression : integer_constant\n                  | expression '+' expression\n                  | expression '-' expression\n                  | expression '*' expression\n                  | expression '/' expression\n                  | '-' expression %prec UMINUS\n                  | '(' expression ')' "
    
_lr_action_items = {')':([31,43,52,54,55,65,72,74,75,78,95,96,97,98,102,103,104,107,109,110,114,115,116,117,118,119,120,122,123,124,126,128,129,130,134,137,141,143,145,149,150,],[-58,-41,-58,-19,77,-66,-28,-21,-20,108,-71,119,120,-53,-58,-58,-58,-58,119,-42,-67,-68,-70,-69,-56,-72,-57,-54,-55,-32,142,144,-35,-22,-23,146,-58,-58,-24,-33,-36,]),'-':([47,59,60,63,64,65,66,67,78,79,80,81,84,85,86,87,88,89,90,91,92,93,94,95,96,100,101,107,109,113,114,115,116,117,118,119,125,139,141,],[64,64,64,87,64,-66,64,64,64,87,64,87,-62,-60,64,64,64,64,-61,-65,64,-63,-64,-71,87,64,64,87,87,64,-67,-68,-70,-69,87,-72,64,87,87,]),'less_equal_sign':([63,65,95,96,114,115,116,117,119,],[90,-66,-71,90,-67,-68,-70,-69,-72,]),'NOT':([47,66,67,100,101,],[67,67,67,67,67,]),'DO':([65,95,114,115,116,117,119,139,],[-66,-71,-67,-68,-70,-69,-72,147,]),'THEN':([65,68,95,98,114,115,116,117,118,119,120,122,123,],[-66,99,-71,-53,-67,-68,-70,-69,-56,-72,-57,-54,-55,]),':':([14,20,23,28,30,53,76,],[-15,-58,-58,51,-16,-58,105,]),'END':([3,5,6,8,11,19,21,27,29,33,34,35,36,37,38,39,40,41,44,45,48,57,61,65,71,72,79,82,95,108,111,112,114,115,116,117,119,121,138,142,144,146,148,151,],[-2,-4,-3,-6,-5,-8,-7,-9,-14,-47,-51,-46,-49,-48,-45,-44,-12,58,-58,-50,-52,-13,-58,-66,-17,-28,-43,112,-71,-39,138,-30,-67,-68,-70,-69,-72,-37,-29,-31,-34,-40,-38,-59,]),'INTEGER':([51,105,131,132,133,135,],[72,72,-26,-27,-25,72,]),'(':([25,47,49,50,56,59,60,64,66,67,78,80,84,85,86,87,88,89,90,91,92,93,94,100,101,113,125,],[31,66,69,70,78,80,80,80,66,66,80,80,-62,-60,80,80,80,80,-61,-65,80,-63,-64,66,66,80,80,]),'assign_op':([42,43,62,110,],[59,-41,83,-42,]),'string_constant':([69,70,],[102,103,]),'integer_constant':([22,47,59,60,64,66,67,78,80,84,85,86,87,88,89,90,91,92,93,94,100,101,113,125,],[29,65,65,65,65,65,65,65,65,-62,-60,65,65,65,65,-61,-65,65,-63,-64,65,65,65,65,]),'PRINT':([3,5,6,8,11,19,21,26,27,29,33,34,35,36,37,38,39,40,44,45,48,61,65,71,72,79,82,95,99,108,112,114,115,116,117,119,121,138,140,142,144,146,147,148,151,],[-2,-4,-3,-6,-5,-8,-7,49,-9,-14,-47,-51,-46,-49,-48,-45,-44,49,-58,-50,-52,-58,-66,-17,-28,-43,49,-71,49,-39,-30,-67,-68,-70,-69,-72,-37,-29,49,-31,-34,-40,49,-38,-59,]),'PROCEDURE':([0,3,4,5,6,8,9,11,15,19,21,27,29,71,72,112,136,138,],[-58,-2,-58,-4,-3,-6,16,-5,16,-8,-7,-9,-14,-17,-28,-30,-18,-29,]),'FOR':([3,5,6,8,11,19,21,26,27,29,33,34,35,36,37,38,39,40,44,45,48,61,65,71,72,79,82,95,99,108,112,114,115,116,117,119,121,138,140,142,144,146,147,148,151,],[-2,-4,-3,-6,-5,-8,-7,46,-9,-14,-47,-51,-46,-49,-48,-45,-44,46,-58,-50,-52,-58,-66,-17,-28,-43,46,-71,46,-39,-30,-67,-68,-70,-69,-72,-37,-29,46,-31,-34,-40,46,-38,-59,]),'OUT':([105,],[131,]),'>':([63,65,95,96,114,115,116,117,119,],[84,-66,-71,84,-67,-68,-70,-69,-72,]),'OR':([65,68,95,97,98,114,115,116,117,118,119,120,122,123,],[-66,101,-71,101,-53,-67,-68,-70,-69,-56,-72,-57,-54,-55,]),'CALL':([3,5,6,8,11,19,21,26,27,29,33,34,35,36,37,38,39,40,44,45,48,61,65,71,72,79,82,95,99,108,112,114,115,116,117,119,121,138,140,142,144,146,147,148,151,],[-2,-4,-3,-6,-5,-8,-7,32,-9,-14,-47,-51,-46,-49,-48,-45,-44,32,-58,-50,-52,-58,-66,-17,-28,-43,32,-71,32,-39,-30,-67,-68,-70,-69,-72,-37,-29,32,-31,-34,-40,32,-38,-59,]),'IN':([105,],[133,]),'greater_equal_sign':([63,65,95,96,114,115,116,117,119,],[93,-66,-71,93,-67,-68,-70,-69,-72,]),'IN_OUT':([105,],[132,]),'/':([63,65,79,81,95,96,107,109,114,115,116,117,118,119,139,141,],[88,-66,88,88,-71,88,88,88,88,88,-70,-69,88,-72,88,88,]),'ELSE':([33,34,35,36,37,38,39,45,48,65,79,95,108,112,114,115,116,117,119,121,138,142,144,146,148,151,],[-47,-51,-46,-49,-48,-45,-44,-50,-52,-66,-43,-71,-39,-30,-67,-68,-70,-69,-72,140,-29,-31,-34,-40,-38,-59,]),'$end':([2,58,],[0,-1,]),',':([7,20,23,43,53,65,95,102,103,107,110,114,115,116,117,119,141,143,],[13,13,13,-41,13,-66,-71,125,127,125,-42,-67,-68,-70,-69,-72,125,127,]),'RETURN':([3,5,6,8,11,19,21,26,27,29,33,34,35,36,37,38,39,40,44,45,48,61,65,71,72,79,82,95,99,108,112,114,115,116,117,119,121,138,140,142,144,146,147,148,151,],[-2,-4,-3,-6,-5,-8,-7,48,-9,-14,-47,-51,-46,-49,-48,-45,-44,48,-58,-50,-52,-58,-66,-17,-28,-43,48,-71,48,-39,-30,-67,-68,-70,-69,-72,-37,-29,48,-31,-34,-40,48,-38,-59,]),'identifier':([1,3,5,6,8,10,11,13,16,19,21,26,27,29,31,32,33,34,35,36,37,38,39,40,44,45,46,48,61,65,71,72,73,79,82,95,99,108,112,114,115,116,117,119,121,127,138,140,142,144,146,147,148,151,],[7,-2,7,-3,-6,20,-5,23,25,20,-7,43,-9,-14,53,56,-47,-51,-46,-49,-48,-45,-44,43,-58,-50,62,-52,-58,-66,-17,-28,53,-43,43,-71,43,-39,-30,-67,-68,-70,-69,-72,-37,43,-29,43,-31,-34,-40,43,-38,-59,]),';':([52,72,77,104,134,145,],[73,-28,106,73,-23,-24,]),'=':([7,12,14,23,30,63,65,95,96,114,115,116,117,119,],[-58,22,-15,-58,-16,85,-66,-71,85,-67,-68,-70,-69,-72,]),'[':([43,],[60,]),'+':([63,65,79,81,95,96,107,109,114,115,116,117,118,119,139,141,],[86,-66,86,86,-71,86,86,86,-67,-68,-70,-69,86,-72,86,86,]),'BEGIN':([0,3,4,5,6,8,9,11,15,17,18,19,21,24,26,27,29,33,34,35,36,37,38,39,40,44,45,48,61,65,71,72,79,82,95,99,106,108,112,114,115,116,117,119,121,136,138,140,142,144,146,147,148,151,],[-58,-2,-58,-4,-3,-6,-58,-5,-58,26,-10,-8,-7,-11,44,-9,-14,-47,-51,-46,-49,-48,-45,-44,44,-58,-50,-52,-58,-66,-17,-28,-43,44,-71,44,44,-39,-30,-67,-68,-70,-69,-72,-37,-18,-29,44,-31,-34,-40,44,-38,-59,]),'VAR':([0,3,4,5,6,11,29,44,61,],[-58,-2,10,-4,-3,-5,-14,-58,10,]),'TO':([83,],[113,]),'CONST':([0,44,],[1,1,]),']':([65,81,95,114,115,116,117,119,],[-66,110,-71,-67,-68,-70,-69,-72,]),'not_equal_sign':([63,65,95,96,114,115,116,117,119,],[91,-66,-71,91,-67,-68,-70,-69,-72,]),'IF':([3,5,6,8,11,19,21,26,27,29,33,34,35,36,37,38,39,40,44,45,48,61,65,71,72,79,82,95,99,108,112,114,115,116,117,119,121,138,140,142,144,146,147,148,151,],[-2,-4,-3,-6,-5,-8,-7,47,-9,-14,-47,-51,-46,-49,-48,-45,-44,47,-58,-50,-52,-58,-66,-17,-28,-43,47,-71,47,-39,-30,-67,-68,-70,-69,-72,-37,-29,47,-31,-34,-40,47,-38,-59,]),'AND':([65,68,95,97,98,114,115,116,117,118,119,120,122,123,],[-66,100,-71,100,-53,-67,-68,-70,-69,-56,-72,-57,-54,-55,]),'READ':([3,5,6,8,11,19,21,26,27,29,33,34,35,36,37,38,39,40,44,45,48,61,65,71,72,79,82,95,99,108,112,114,115,116,117,119,121,138,140,142,144,146,147,148,151,],[-2,-4,-3,-6,-5,-8,-7,50,-9,-14,-47,-51,-46,-49,-48,-45,-44,50,-58,-50,-52,-58,-66,-17,-28,-43,50,-71,50,-39,-30,-67,-68,-70,-69,-72,-37,-29,50,-31,-34,-40,50,-38,-59,]),'*':([63,65,79,81,95,96,107,109,114,115,116,117,118,119,139,141,],[89,-66,89,89,-71,89,89,89,89,89,-70,-69,89,-72,89,89,]),'<':([63,65,95,96,114,115,116,117,119,],[94,-66,-71,94,-67,-68,-70,-69,-72,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([47,59,60,64,66,67,78,80,86,87,88,89,92,100,101,113,125,],[63,79,81,95,96,63,107,109,114,115,116,117,118,63,63,139,141,]),'var_decl':([10,19,],[19,19,]),'H':([103,143,],[128,150,]),'statement_assign':([26,40,82,99,140,147,],[33,33,33,33,33,33,]),'G':([102,107,141,],[126,137,149,]),'call':([26,40,82,99,140,147,],[34,34,34,34,34,34,]),'read':([26,40,82,99,140,147,],[35,35,35,35,35,35,]),'statement_for':([26,40,82,99,140,147,],[36,36,36,36,36,36,]),'cond':([26,40,82,99,140,147,],[37,37,37,37,37,37,]),'C':([9,15,],[17,24,]),'B':([4,61,],[9,82,]),'program':([0,],[2,]),'print':([26,40,82,99,140,147,],[38,38,38,38,38,38,]),'empty':([0,4,7,9,15,20,23,31,44,52,53,61,102,103,104,107,141,143,],[3,8,14,18,18,14,14,54,3,74,14,8,124,129,74,124,124,129,]),'F':([31,],[55,]),'block':([26,40,82,99,106,140,147,],[39,39,39,39,136,39,39,]),'statement':([26,40,82,99,140,147,],[40,40,40,121,148,151,]),'D':([26,40,82,],[41,57,111,]),'var':([26,40,82,99,127,140,147,],[42,42,42,42,143,42,42,]),'proc_decl':([9,15,],[15,15,]),'A_1':([1,5,],[6,11,]),'return':([26,40,82,99,140,147,],[45,45,45,45,45,45,]),'type':([51,105,135,],[71,134,145,]),'F_1':([52,104,],[75,130,]),'format':([31,73,],[52,104,]),'const_decl':([1,5,],[5,5,]),'E':([7,20,23,53,],[12,28,30,76,]),'relop':([63,96,],[92,92,]),'bool':([47,66,67,100,101,],[68,97,98,122,123,]),'B_1':([10,19,],[21,27,]),'A':([0,44,],[4,61,]),'mode':([105,],[135,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> A B C BEGIN D END','program',6,'p_program','our_parser.py',14),
  ('A -> empty','A',1,'p_A','our_parser.py',18),
  ('A -> CONST A_1','A',2,'p_A','our_parser.py',19),
  ('A_1 -> const_decl','A_1',1,'p_A_1','our_parser.py',25),
  ('A_1 -> const_decl A_1','A_1',2,'p_A_1','our_parser.py',26),
  ('B -> empty','B',1,'p_B','our_parser.py',30),
  ('B -> VAR B_1','B',2,'p_B','our_parser.py',31),
  ('B_1 -> var_decl','B_1',1,'p_B_1','our_parser.py',35),
  ('B_1 -> var_decl B_1','B_1',2,'p_B_1','our_parser.py',36),
  ('C -> empty','C',1,'p_C','our_parser.py',40),
  ('C -> proc_decl C','C',2,'p_C','our_parser.py',41),
  ('D -> statement','D',1,'p_D','our_parser.py',45),
  ('D -> statement D','D',2,'p_D','our_parser.py',46),
  ('const_decl -> identifier E = integer_constant','const_decl',4,'p_const_decl','our_parser.py',50),
  ('E -> empty','E',1,'p_E','our_parser.py',53),
  ('E -> , identifier E','E',3,'p_E','our_parser.py',54),
  ('var_decl -> identifier E : type','var_decl',4,'p_var_decl','our_parser.py',58),
  ('proc_decl -> PROCEDURE identifier ( F ) ; block','proc_decl',7,'p_proc_decl','our_parser.py',62),
  ('F -> empty','F',1,'p_F','our_parser.py',66),
  ('F -> format F_1','F',2,'p_F','our_parser.py',67),
  ('F_1 -> empty','F_1',1,'p_F_1','our_parser.py',71),
  ('F_1 -> ; format F_1','F_1',3,'p_F_1','our_parser.py',72),
  ('format -> identifier E : type','format',4,'p_format','our_parser.py',76),
  ('format -> identifier E : mode type','format',5,'p_format','our_parser.py',77),
  ('mode -> IN','mode',1,'p_mode','our_parser.py',81),
  ('mode -> OUT','mode',1,'p_mode','our_parser.py',82),
  ('mode -> IN_OUT','mode',1,'p_mode','our_parser.py',83),
  ('type -> INTEGER','type',1,'p_type','our_parser.py',87),
  ('block -> BEGIN A B D END','block',5,'p_block','our_parser.py',91),
  ('block -> BEGIN A B END','block',4,'p_block','our_parser.py',92),
  ('print -> PRINT ( string_constant G )','print',5,'p_print','our_parser.py',96),
  ('G -> empty','G',1,'p_G','our_parser.py',100),
  ('G -> , expression G','G',3,'p_G','our_parser.py',101),
  ('read -> READ ( string_constant H )','read',5,'p_read','our_parser.py',106),
  ('H -> empty','H',1,'p_H','our_parser.py',110),
  ('H -> , var H','H',3,'p_H','our_parser.py',111),
  ('cond -> IF bool THEN statement','cond',4,'p_cond','our_parser.py',115),
  ('cond -> IF bool THEN statement ELSE statement','cond',6,'p_cond','our_parser.py',116),
  ('call -> CALL identifier ( )','call',4,'p_call','our_parser.py',120),
  ('call -> CALL identifier ( expression G )','call',6,'p_call','our_parser.py',121),
  ('var -> identifier','var',1,'p_var','our_parser.py',125),
  ('var -> identifier [ expression ]','var',4,'p_var','our_parser.py',126),
  ('statement_assign -> var assign_op expression','statement_assign',3,'p_statement_assign','our_parser.py',130),
  ('statement -> block','statement',1,'p_statement','our_parser.py',135),
  ('statement -> print','statement',1,'p_statement','our_parser.py',136),
  ('statement -> read','statement',1,'p_statement','our_parser.py',137),
  ('statement -> statement_assign','statement',1,'p_statement','our_parser.py',138),
  ('statement -> cond','statement',1,'p_statement','our_parser.py',139),
  ('statement -> statement_for','statement',1,'p_statement','our_parser.py',140),
  ('statement -> return','statement',1,'p_statement','our_parser.py',141),
  ('statement -> call','statement',1,'p_statement','our_parser.py',142),
  ('return -> RETURN','return',1,'p_return','our_parser.py',147),
  ('bool -> NOT bool','bool',2,'p_bool','our_parser.py',151),
  ('bool -> bool AND bool','bool',3,'p_bool','our_parser.py',152),
  ('bool -> bool OR bool','bool',3,'p_bool','our_parser.py',153),
  ('bool -> expression relop expression','bool',3,'p_bool','our_parser.py',154),
  ('bool -> ( bool )','bool',3,'p_bool','our_parser.py',155),
  ('empty -> <empty>','empty',0,'p_empty','our_parser.py',159),
  ('statement_for -> FOR identifier assign_op TO expression DO statement','statement_for',7,'p_statement_for','our_parser.py',165),
  ('relop -> =','relop',1,'p_relop','our_parser.py',169),
  ('relop -> less_equal_sign','relop',1,'p_relop','our_parser.py',170),
  ('relop -> >','relop',1,'p_relop','our_parser.py',171),
  ('relop -> greater_equal_sign','relop',1,'p_relop','our_parser.py',172),
  ('relop -> <','relop',1,'p_relop','our_parser.py',173),
  ('relop -> not_equal_sign','relop',1,'p_relop','our_parser.py',174),
  ('expression -> integer_constant','expression',1,'p_expression','our_parser.py',192),
  ('expression -> expression + expression','expression',3,'p_expression','our_parser.py',193),
  ('expression -> expression - expression','expression',3,'p_expression','our_parser.py',194),
  ('expression -> expression * expression','expression',3,'p_expression','our_parser.py',195),
  ('expression -> expression / expression','expression',3,'p_expression','our_parser.py',196),
  ('expression -> - expression','expression',2,'p_expression','our_parser.py',197),
  ('expression -> ( expression )','expression',3,'p_expression','our_parser.py',198),
]
